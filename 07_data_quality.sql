USE ROLE ACCOUNTADMIN;
USE DATABASE DEMO_DB;
USE SCHEMA DEMO_DB.OPS;

-- 1) Tabelas de regras e resultados
CREATE OR REPLACE TABLE DQ_RULES (
  RULE_ID NUMBER AUTOINCREMENT,
  TARGET_DB STRING,
  TARGET_SCHEMA STRING,
  TARGET_TABLE STRING,
  RULE_TYPE STRING,               -- NOT_NULL_PCT, DUPLICATE_CHECK etc.
  RULE_EXPR STRING,               -- ex.: 'EMAIL'
  THRESHOLD NUMBER(5,2),          -- percentual mínimo aceito
  ACTIVE BOOLEAN DEFAULT TRUE,
  PRIMARY KEY (RULE_ID)
);

CREATE OR REPLACE TABLE DQ_RESULTS (
  RUN_AT TIMESTAMP_NTZ,
  RULE_ID NUMBER,
  RESULT_VALUE NUMBER(10,2),
  PASSED BOOLEAN,
  DETAILS STRING
);

-- 2) Procedure que executa regras básicas
CREATE OR REPLACE PROCEDURE RUN_DQ()
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  c1 CURSOR FOR SELECT RULE_ID, TARGET_DB, TARGET_SCHEMA, TARGET_TABLE, RULE_TYPE, RULE_EXPR, THRESHOLD FROM DQ_RULES WHERE ACTIVE;
  v_sql STRING;
  v_value NUMBER(10,2);
  v_pass BOOLEAN;
BEGIN
  FOR rec IN c1 DO
    IF rec.RULE_TYPE = 'NOT_NULL_PCT' THEN
      LET v_sql := 'SELECT (1 - (SUM(CASE WHEN '||rec.RULE_EXPR||' IS NULL THEN 1 ELSE 0 END)::FLOAT / NULLIF(COUNT(*),0)) * 100)
                    FROM '||rec.TARGET_DB||'.'||rec.TARGET_SCHEMA||'.'||rec.TARGET_TABLE||'';
    ELSIF rec.RULE_TYPE = 'DUPLICATE_CHECK' THEN
      LET v_sql := 'SELECT (1 - (SUM(CASE WHEN CNT>1 THEN CNT-1 ELSE 0 END)::FLOAT / NULLIF(COUNT(*),0)) * 100)
                    FROM (SELECT '||rec.RULE_EXPR||', COUNT(*) CNT FROM '||rec.TARGET_DB||'.'||rec.TARGET_SCHEMA||'.'||rec.TARGET_TABLE||' GROUP BY '||rec.RULE_EXPR||')';
    ELSE
      CONTINUE;
    END IF;

    EXECUTE IMMEDIATE 'SELECT '||v_sql INTO :v_value;
    LET v_pass := (v_value >= rec.THRESHOLD);

    INSERT INTO DQ_RESULTS VALUES (CURRENT_TIMESTAMP(), rec.RULE_ID, v_value, v_pass, v_sql);
  END FOR;
  RETURN 'DQ run completed';
END;
$$;

-- 3) Popula regras exemplo
INSERT INTO DQ_RULES (TARGET_DB, TARGET_SCHEMA, TARGET_TABLE, RULE_TYPE, RULE_EXPR, THRESHOLD)
SELECT 'DEMO_DB','CURATED','DIM_CUSTOMER','NOT_NULL_PCT','EMAIL', 98.0
UNION ALL SELECT 'DEMO_DB','CURATED','DIM_CUSTOMER','DUPLICATE_CHECK','ID', 99.0;

-- 4) Task para agendar DQ
CREATE OR REPLACE TASK T_RUN_DQ
  WAREHOUSE=WH_ETL
  SCHEDULE='USING CRON */30 * * * * UTC'
AS
CALL RUN_DQ();

ALTER TASK T_RUN_DQ RESUME;
